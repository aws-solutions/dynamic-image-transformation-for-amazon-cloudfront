AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  "UGCMods Serverless Image Handler"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: CORS Options
        Parameters:
          - CorsEnabled
          - CorsOrigin
      - Label:
          default: Image Sources
        Parameters:
          - SourceBuckets
      - Label:
          default: Event Logging
        Parameters:
          - LogRetentionPeriod
      - Label:
          default: Auto WebP
        Parameters:
          - AutoWebP
Parameters:
  Env:
    Type: String
    Description: BNET Environment
    Default: "dev"
  CorsEnabled:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
    Description: Would you like to enable Cross-Origin Resource Sharing (CORS) for the image handler API? Select 'Yes' if so.
  CorsOrigin:
    Type: String
    Default: "*"
    Description: If you selected 'Yes' above, please specify an origin value here. A wildcard (*) value will support any origin. We recommend specifying an origin (i.e. https://example.domain) to restrict cross-site access to your API.
  SourceBuckets:
    Type: String
    Default: defaultBucket, bucketNo2, bucketNo3, ...
    AllowedPattern: .+
    Description: (Required) List the buckets (comma-separated) within your account that contain original image files. If you plan to use Thumbor or Custom image requests with this solution, the source bucket for those requests will be the first bucket listed in this field.
  LogRetentionPeriod:
    Type: Number
    Default: "1"
    AllowedValues:
      - "1"
      - "3"
      - "5"
      - "7"
      - "14"
      - "30"
      - "60"
      - "90"
      - "120"
      - "150"
      - "180"
      - "365"
      - "400"
      - "545"
      - "731"
      - "1827"
      - "3653"
    Description: This solution automatically logs events to Amazon CloudWatch. Select the amount of time for CloudWatch logs from this solution to be retained (in days).
  AutoWebP:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
    Description: Would you like to enable automatic WebP based on accept headers? Select 'Yes' if so.
Mappings:
  Send:
    AnonymousUsage:
      Data: "Yes"
Conditions:
  EnableCorsCondition:
    Fn::Equals:
      - Ref: CorsEnabled
      - "Yes"
Resources:
  ImageHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 1024
      CodeUri: serverless-image-handler/
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt ImageHandlerFunctionRole.Arn
      Timeout: 30
      FunctionName: !Sub '${Env}-serverless-image-handler'
      Description: Serverless Image Handler - Function for performing image edits and manipulations.
      Environment:
        Variables:
          AUTO_WEBP:
            Ref: AutoWebP
          CORS_ENABLED:
            Ref: CorsEnabled
          CORS_ORIGIN:
            Ref: CorsOrigin
          SOURCE_BUCKETS:
            Ref: SourceBuckets
    DependsOn:
      - ImageHandlerFunctionRole
  ImageHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Path: /
      RoleName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - ImageHandlerFunctionRole-
            - Ref: AWS::Region
  ImageHandlerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":logs:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :log-group:/aws/lambda/*
          - Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - :s3:::*
          - Action:
              - rekognition:DetectFaces
              - rekognition:DetectModerationLabels
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - ImageHandlerPolicy
      Roles:
        - Ref: ImageHandlerFunctionRole
  ImageHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - ImageHandlerFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: ImageHandlerApi
            - /*/*/*
  ImageHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: ImageHandlerFunction
      RetentionInDays:
        Ref: LogRetentionPeriod
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  ApiLogs:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  ImageHandlerApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: "2.0"
        info:
          title: ServerlessImageHandler
        basePath: /image
        schemes:
          - https
        paths:
          "/{proxy+}":
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
                - name: signature
                  in: query
                  description: Signature of the image
                  required: false
                  type: string
              responses: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri:
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - Ref: AWS::Region
                      - ":"
                      - lambda:path/2015-03-31/functions/
                      - Fn::GetAtt:
                          - ImageHandlerFunction
                          - Arn
                      - /invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                cacheNamespace: xh7gp9
                cacheKeyParameters:
                  - method.request.path.proxy
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
          - "*/*"
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: ServerlessImageHandler
  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :*
            Version: "2012-10-17"
          PolicyName: LambdaRestApiCloudWatchRolePolicy
  ApiAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - ApiLoggingRole
          - Arn
    DependsOn:
      - ImageHandlerApi
  ImageHandlerApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ImageHandlerApi
      StageDescription:
        AccessLogSetting:
          DestinationArn:
            Fn::GetAtt:
              - ApiLogs
              - Arn
          Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
      StageName: image
    DependsOn:
      - ApiAccountConfig
  ImageHandlerCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name:
          Fn::Join:
            - ""
            - - Ref: AWS::StackName
              - "-"
              - Ref: AWS::Region
              - -ImageHandlerCachePolicy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - origin
              - accept
          QueryStringsConfig:
            QueryStringBehavior: whitelist
            QueryStrings:
              - signature
  ImageHandlerOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        CookiesConfig:
          CookieBehavior: none
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers:
            - origin
            - accept
        Name:
          Fn::Join:
            - ""
            - - Ref: AWS::StackName
              - "-"
              - Ref: AWS::Region
              - -ImageHandlerOriginRequestPolicy
        QueryStringsConfig:
          QueryStringBehavior: whitelist
          QueryStrings:
            - signature
Outputs:
  SourceBuckets:
    Description: Amazon S3 bucket location containing original image files.
    Value:
      Ref: SourceBuckets
  CorsEnabled:
    Description: Indicates whether Cross-Origin Resource Sharing (CORS) has been enabled for the image handler API.
    Value:
      Ref: CorsEnabled
  CorsOrigin:
    Description: Origin value returned in the Access-Control-Allow-Origin header of image handler API responses.
    Value:
      Ref: CorsOrigin
    Condition: EnableCorsCondition
  LogRetentionPeriod:
    Description: Number of days for event logs from Lambda to be retained in CloudWatch.
    Value:
      Ref: LogRetentionPeriod

